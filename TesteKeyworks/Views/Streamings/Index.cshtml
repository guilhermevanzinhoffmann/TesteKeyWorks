@using TesteKeyworks.Models.Paginacao
@model PaginatedList<TesteKeyworks.Models.Streaming>

@{
    ViewData["Title"] = "Streamings";
}

<h1>Streamings</h1>

<p>
    <a asp-action="Create">Cadastrar streaming</a>
</p>

<form asp-controller="Streamings" asp-action="Index" asp-route-asp-page="@Model.PageIndex" method="get">
    <p>
        Nome: <input type="text" id="nome" name="nome" asp-for="@ViewData["nome"]" />
        <input type="submit" value="Pesquisar" />
    </p>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                Nome
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Nome)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Editar</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Detalhes</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Excluir</a>
            </td>
        </tr>
}
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-page="@(Model.PageIndex - 1)"
   class="btn btn-default @prevDisabled">
    Anterior
</a>
<a asp-action="Index"
   asp-route-page="@(Model.PageIndex + 1)"
   class="btn btn-default @nextDisabled">
    Próximo
</a>
